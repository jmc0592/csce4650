%{
#include <iostream>
#include <stdio.h>
#include "SymbolTableList.h"
#include "Stack.h"
#include <string.h>
#include "List.h"
#include <stdlib.h>
#include <regex.h>
#include "Record.h"
#include <list>
using namespace std;
extern "C" int yylex();
extern "C" int yyparse();
void yyerror(const char*);
int g_offSet = 0;//global used to keep byte offset
int g_ifCounter;
int g_loopCounter;
list<int> g_sizeList;
void generate_expression(const char *, char *);
void updateOffSet(char *);
void calcArrayOffSet(char *);
int getSumOfRowMajor(list<int> l);
int searchRegisters(const char *);
int registerNumber = 4;//reserve r0 for 0. r1, r2, r3 for operations
char tempR[100];
char *tempS;
/***** Probably change structure to be better for this new grammar
void generate_copy(const char *, int);
void generate_expression(const char *, int);
char * generate_exponentiation(char *base, char *exponent);
void generate_output(const char *);
int checkIfVarIsRegister(char *);
int generate_temp_expression(char *a, char *b, char *c);
void printingThings();
int searchRegisters(const char *);
char* uh;
*/
%}

%union
{
    int intstuff;
    char *stringstuff;
    List *symbolstuff;
}

%token <intstuff> INTLITERAL 
%token <stringstuff> STRINGLITERAL
//%token <symbolstuff> ID
%token <symbolstuff> NAME
%token CONTINUE
%token ELSE
%token IF
%token DO
%token NOT
%token AND
%token OR
%token GT
%token GE
%token LE
%token LT
%token EQ
%token NEQ
%token END
%token BEG
%token EXPONENT
%token OUTPUT
%token <stringstuff> INT
%token <stringstuff> BOOL
%token <stringstuff> CHAR
%token <stringstuff> VOID
%token QUIT
%token RETURN

%type <stringstuff> id
%type <stringstuff> program
%type <stringstuff> dec_list
%type <stringstuff> func_list
%type <stringstuff> func
%type <stringstuff> parm_list
%type <stringstuff> s_block
%type <stringstuff> decl
%type <stringstuff> type
%type <stringstuff> size_list
%type <stringstuff> stmts
%type <stringstuff> end_do
%type <stringstuff> conditional_expr
%type <stringstuff> do_list
%type <stringstuff> expr_list
%type <stringstuff> shift_term
%type <stringstuff> bit_term
%type <stringstuff> u_operand
%type <stringstuff> primary
%type <stringstuff> rel_op
%type <stringstuff> bop
%type <stringstuff> uop
%type <stringstuff> shift_op
%type <stringstuff> expression
%type <stringstuff> term
//%type <stringstuff> atom
%type <stringstuff> factor
%type <stringstuff> mul_op
%type <stringstuff> add_op
%type <stringstuff> statement /* statement_list */