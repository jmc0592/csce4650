/*
 * gram.prod
 * NAME is taking place of what was previously ID. 
 */
%start program


%%
program:    dec_list func_list
    ;

func_list:   func
            |   func func_list
    ;

func:   NAME '(' parm_list ')' ':' type {stackCopy->push();} dec_list s_block
        {
            printf("[Parser][func]: pop new STL\n");
            stackCopy->pop();
        }
    ;

parm_list:   NAME
            |   NAME ',' parm_list
            |
    ;               /* goes to "nothing", i.expression. empty string */ 

dec_list:   decl
            | decl ';' dec_list
            |  /* goes to "nothing", i.expression. empty string */
    ;         
decl:   type NAME
        {
            stackCopy->curr->symbolRecord.current->setType(strdup($1));
            stackCopy->curr->symbolRecord.current->setOffset(g_offSet);
            printf("[Parser][decl]: '%s' inserted. type = %s and offset = %d to stack\n", strdup($2->current->key.c_str()), strdup($1), g_offSet);
            
            updateOffSet(strdup($1));
        }
        |   type NAME '['size_list']'
        {
            stackCopy->curr->symbolRecord.current->setType(strdup($1));
            stackCopy->curr->symbolRecord.current->setOffset(g_offSet);
            printf("[Parser][decl]: array '%s' inserted. type = %s and offset = %d to stack\n", strdup($2->current->key.c_str()),strdup($1), g_offSet);

            printf("[Parser][decl]: sizeList list contains ... \n");
            for(list<int>::iterator list_iter = g_sizeList.begin(); list_iter != g_sizeList.end(); list_iter++)
            {
                printf("[Parser][decl]: %d\n",*list_iter);
            }

            calcArrayOffSet(strdup($1));
            g_sizeList.clear();
        }
    ;

size_list:  INTLITERAL
            {
                g_sizeList.push_front($1);
            }
            |   INTLITERAL ',' size_list
            {
                g_sizeList.push_front($1);
            }
    ;

type:   INT
        {
            $$ = strdup($1);
        }
        |   CHAR
        {
            $$ = strdup($1);
        }
        |   BOOL
        {
            $$ = strdup($1);
        }
        |   VOID
        {
            $$ = strdup($1);
        }
    ;

s_block: BEG {stackCopy->push();} dec_list stmts END
        {
            printf("[Parser][s_block]: pop new STL\n");
            stackCopy->pop();
        }
    ;

stmts:  statement
        |   statement stmts
    ;

statement:  id '=' expression
            {
                printf("[Parser][statement]: id = expression;\n");                
                generate_expression($1, $3);
            }
            |   NAME '(' expr_list ')'
            |   id '=' conditional_expr            
            |   if_start
            {
                printf("[Parser]: if body\n");
                printf("IfElse%d:\n",g_ifCounterStack.top());
                printf("IfEnd%d:\n", g_ifCounterStack.top());
                g_ifCounterStack.pop();                                
            }
            |   if_start ELSE s_block
            {
                printf("[Parser][statement]: else body\n");
                printf("IfElse%d:\n", g_ifCounterStack.top());
                printf("ELSE STUFSSSSSSSSSSS\n");
                printf("IfEnd%d:\n", g_ifCounterStack.top());                
                g_ifCounterStack.pop();                
            }            
            |   DO {g_loopCounterStack.push(g_loopCounter);} INTLITERAL NAME '=' do_list {printf("StartDoLoop%d:\n",g_loopCounter);g_loopCounter++;} stmts end_do
            {
                printf("[Parser][statement]: loop found. counter = %d\n", g_loopCounter);
            }
            |   RETURN primary
            |   QUIT
    ;

if_start:   IF {g_ifCounterStack.push(g_ifCounter); g_ifCounter++;printf("IfStart%d:\n", g_ifCounterStack.top());} '(' {printf("if(");} conditional_expr ')' 
                {
                    printf(") goto IfThen%d;\n", g_ifCounterStack.top());
                    printf("goto IfElse%d;\n", g_ifCounterStack.top());
                }
            s_block
                {
                    printf("IfThen%d:\n", g_ifCounterStack.top());
                    printf("goto IfEnd%d;\n", g_ifCounterStack.top());

                    printf("[Parser][if_start]: then body\n");
                }
    ;

end_do:  INTLITERAL CONTINUE
        {
            printf("[Parser][end_do]: INTLITERAL CONTINE\n");
            printf("if(r%d<r%d) goto StartDoLoop%d;\n", registerNumber++, registerNumber++, g_loopCounterStack.top());
            printf("EndDoLoop%d:\n", g_loopCounterStack.top());
            g_loopCounterStack.pop();
        }
    ;

conditional_expr:    expression rel_op expression
                    {
                        printf("[Parser][conditional_expr]: exp rel_op exp\n");
                        printf("%s %s %s", strdup($1), strdup($2), strdup($3));
                    }
                    |   NOT '(' conditional_expr ')'
                    |   conditional_expr AND '(' conditional_expr ')'
                    |   conditional_expr AND expression rel_op expression
                    {
                    printf("[Parser][conditional_expr]: conditional_expr AND exp rel_op exp\n");
                    }
                    |   conditional_expr OR '(' conditional_expr ')'
                    |   conditional_expr OR expression rel_op expression
    ;

do_list: expression ',' expression
        |   expression ',' expression ',' expression
    ;

expr_list:   expression
            {
                $$ = strdup($1);
            }
            |   expression ',' expr_list
            {
                $$ = strdup($1);
            }
            |   /* goes to "nothing", i.expression. empty string */ 
    ;

expression:  expression bop bit_term
            |   bit_term
            {
                $$ = strdup($1);
            }    
    ;

bit_term:    bit_term shift_op shift_term
            |   shift_term
            {
                $$ = strdup($1);
            }            
    ;

shift_term:  shift_term add_op term
            {
            if(expressionReg != NULL){
                //printf("not NULL\n");
                sprintf(expressionReg, "r%d", generate_temp_expression($1, $2, expressionReg));
                //printf("%s\n", expressionReg);
            }
            else{
                expressionReg = (char *)malloc(sizeof(char));
                //printf("IS NULL\n");
                sprintf(expressionReg, "r%d", generate_temp_expression($1, $2, $3));
                //printf("%s\n", expressionReg);
            }                
            }
            |   term
            {
                $$ = strdup($1);
            }
    ;

term:   term mul_op factor
        {
            if(expressionReg != NULL){
                //printf("not NULL\n");
                sprintf(expressionReg, "r%d", generate_temp_expression($1, $2, expressionReg));
                //printf("%s\n", expressionReg);
            }
            else{
                expressionReg = (char *)malloc(sizeof(char));
                //printf("IS NULL\n");
                sprintf(expressionReg, "r%d", generate_temp_expression($1, $2, $3));
                //printf("%s\n", expressionReg);
            }            
        }
        |   factor
        {
            $$ = strdup($1);
        }
    ;

factor: factor EXPONENT u_operand
        |   u_operand
        {
            $$ = strdup($1);
        }
    ;

u_operand:   uop primary
            |   primary
            {
                $$ = strdup($1);
            }
    ;

primary:    id
            {
                $$ = strdup($1);
                printf("[Parser][primary]: id is %s\n", strdup($1));
            }
            |   NAME '(' expr_list ')'   
            |   '(' expression ')'
            |   INTLITERAL		/* could be any integer number */
            {
                tempS = (char*)malloc(sizeof(char)*50);
                sprintf(tempS,"%d",$1);
                $$ = tempS;
                printf("[Parser][primary]: INTLITERAL is %d\n",$1);                
            }
            |   STRINGLITERAL	/* any quoted string, like "ET phone home" */
    ;

element_list:   element
                {
                    printf("[Parser][element_list]:\n");
                    $$ = strdup($1);
                    g_elementList.push_front($1);
                }
                |
                element ',' element_list
                {
                    printf("[Parser][element_list]:\n");
                    $$ = strdup($1);
                    g_elementList.push_front($1);
                }
    ;

element:    NAME
            {
                $$ = strdup($1->current->key.c_str());
            }
            |
            INTLITERAL
            {
                tempS = (char*)malloc(sizeof(char)*50);
                sprintf(tempS,"%d",$1);
                $$ = tempS;
                printf("[Parser][primary]: INTLITERAL is %d\n",$1);                 
            }
    ;

id: NAME
    {
        $$ = strdup($1->current->key.c_str());
    }
    |   NAME '[' element_list ']' 
    {
        //printf("[Parser][id]: expr_list = %s\n", strdup($3)); 
        for(list<char *>::iterator list_iter = g_elementList.begin(); list_iter != g_elementList.end(); list_iter++)
        {
            if(containsNumbers(*(list_iter)) == 1) {
                //printf("r1 = %s\n", *(list_iter));
                ;
            }
        }
        int sum = calcArrayElementOffset($1->current->key);
        printf("r%d = *(globalData + %d);\n", registerNumber, sum);
        registerNumber++;
        //$$ = strdup($1->current->key.c_str());
        g_elementList.clear();
    }
    ;

rel_op:  GT {$$ = ">"}
        |   GE {$$ = ">="}
        |   LE {$$ = "<=";}
        |   LT {$$ = "<";}
        |   EQ {$$ = "=";}
        |   NEQ {$$ = "!=";}
    ;

bop:    '&' {$$ = "&";}
        |   '|' {$$ = "|";}
        |   '^' {$$ = "^";}
    ;

shift_op:    "<<" {$$ = "<<";}
            |   ">>" {$$ = ">>";}
    ;

mul_op:  '*' {$$ = "*";}
        |   '/' {$$ = "/";}
        |   '%' {$$ = "%";}
    ;

add_op:  '+' {$$ = "+";}
        |   '-' {$$ = "-";}
    ;

uop:    '-' {$$ = "-";}
        |   "++" {$$ = "++";}
        |   "--" {$$ = "--";}
        |   '&' {$$ = "&";}
        |   '~' {$$ = "~";}
    ;
%%
int containsNumbers(char *s)
{
    while (*s) {
        if (isdigit(*s++) == 0) return 0;
    }

    return 1;
}


void calcArrayOffSet(char *type)
{
    list<int> rowMajor, tempArrayDimension;
    int temp;

    tempArrayDimension.push_front(4);

    //4 bytes for int, 1 byte for char
    if(strcmp(type, "int") == 0) {
        rowMajor.push_front(4);
    }
    else {
        rowMajor.push_front(1);
    }

    //logic for creating node for array offsets 
    for(list<int>::iterator list_iter = g_sizeList.begin(); list_iter != g_sizeList.end(); list_iter++)
    {
        temp = (*list_iter) * rowMajor.front();
        rowMajor.push_front(temp);
    }

    g_offSet = rowMajor.front();
    rowMajor.pop_front();//don't need front for dimension list
    tempArrayDimension = rowMajor;

    for(list<int>::iterator list_iter = tempArrayDimension.begin(); list_iter != tempArrayDimension.end(); list_iter++)
    {
        printf("[Parser][calcArrayOffSet]: %d\n", *(list_iter));
    }
    stackCopy->curr->symbolRecord.current->setArrayDimensionList(tempArrayDimension);
}

int calcArrayElementOffset(string key)
{
    list<int> tempL = list<int>();
    Record *tempRecord;
    int sum = 0;
    int i = 0;

    tempRecord = stackCopy->curr->recordSearch(key.c_str());
    tempL = tempRecord->getArrayDimensionList();
    
    for(list<char *>::iterator list_iter = g_elementList.begin(); list_iter != g_elementList.end(); list_iter++)
    {
        if(containsNumbers(*(list_iter)) == 1) {
            sum = sum + (atoi(*(list_iter)) * tempL.front());
            //printf("r%d = %d\n", i, sum);//offset for array index
            //printf("[Parser][calcArrayElementOffset]: arrayDimension = %d\n", tempL.front());
            tempL.pop_front();
        }
    }

    return sum;

}

int getSumOfRowMajor(list<int> l)
{
    int sum = 0;
    for(list<int>::iterator list_iter = l.begin(); list_iter != l.end(); list_iter++)
    {
        sum = sum + (*list_iter);
        cout << "[Parser][getSumOfRowMajor]: node = " << *list_iter << endl;
    }
    cout << "[Parser][getSumOfRowMajor]: sum = " << sum << endl;    
    return sum;
}

void updateOffSet(char *type)
{
    if(strcmp(type, "int") == 0) {
        g_offSet = g_offSet + 4;//4 bytes for an int
    } else {
        g_offSet = g_offSet + 1;//1 bytes for a char
    }
}
int searchRegisters(const char *target){
    for(int x = 0; x<=registerNumber; x++){
        char temp = tempR[x];
        char temp2 = (char)target[0];
        if(temp == temp2){
            //printf("IT IS HERE: %c\n", (char)target[0]);
            return x;
        }
        else{
            //printf("ITS NOT FOUND YO\n");
        }
    }
    return -1;
}

int generate_temp_expression(char *a, char *b, char *c)
{
    if(searchRegisters(a) != -1){
        //printf("HERE IS THE THINKY FOR searchRegisters: %d\n", searchRegisters(a));
        sprintf(a, "r%d", searchRegisters(a));
    }
    /*if(searchRegisters(b) != -1){
        //printf("HERE IS THE THINKY FOR searchRegisters: %d\n", searchRegisters(a));
        sprintf(b, "r%d", searchRegisters(b));
    }*/
        //printf ("is it getting down here: %d\n",searchRegisters(c));
    if(searchRegisters(c) != -1){
        //printf("its in the second if");
        sprintf(c, "r%d", searchRegisters(c));
    }
    printf("r%d = %s %s %s;\n", registerNumber, a, b, c);
    registerNumber++;
    //printingThings();
    //searchRegisters(a);
    return (registerNumber-1);
}

void generate_expression(const char *str, char *rhs)
{
    printf("[Parser][generate_expression]: rhs values = %s\n", rhs);
    if(searchRegisters(rhs) != -1){
        printf("r%d = r%d;\n", registerNumber, searchRegisters(rhs));
        tempR[registerNumber] = (char)str[0];
        registerNumber++;
        //printingThings();
        searchRegisters(str);
    }
    else{
        printf("r%d = %s;\n", registerNumber, rhs);
        stackCopy->curr->offsetSearch(str);
        printf("*(globalData + %d) = r%d\n", stackCopy->curr->offsetSearch(str), registerNumber);
        tempR[registerNumber] = (char)str[0];
        registerNumber++;
        //printingThings();
        searchRegisters(str);
    }
}

void yyerror(const char *s)
{
        fflush(stdout);
        printf("Syntax Error: %s\n",s);
}