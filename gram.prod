//TODO: Change case to yacc standard
//TODO: Create tokens for any productions that go to more than 1 character
%start Program


%%
Program:    DeclList FuncList
    ;

FuncList:   Func
            |   Func FuncList
    ;

Func:   name '(' ParmList ') ':' Type DeclList SBlock
    ;

ParmList:   name
            |   name, ParmList
            |
    ;               /* goes to "nothing", i.e. empty string */ 

DeclList:   Decl
            | Decl ';' DeclList
            |   /* goes to "nothing", i.e. empty
				   string */ 
Decl:   Type name
        |   Type name '['SizeList']'
    ;

SizeList:   intLiteral
            |   intLiteral , SizeList
    ;

Type:   int
        |   char
        |   boolean
        |   void
        |   double
    ;

SBlock: begin DeclList Stmts end

Stmts:  S
        |   S Stmts
    ;

S:  ID '=' E
    |   name '(' ExprList ')'
    |   ID '=' ConditionalExpr
    |   if '(' ConditionalExpr ')' SBlock
    |   if '(' ConditionalExpr ')' SBlock else SBlock
    |   do intLiteral name '=' DoList Stmts Enddo
    ;

Enddo:  intLiteral continue

ConditionalExpr:    E RelOp E
                    |   not '(' ConditionalExpr ')'
                    |   ConditionalExpr and '(' ConditionalExpr ')'
                    |   ConditionalExpr and E RelOp E
                    |   ConditionalExpr or '(' ConditionalExpr ')'
                    |   ConditionalExpr or E RelOp E
    ;

DoList: E ',' E
        |   E ',' E ',' E
    ;

ExprList:   E
            |   E ',' ExprList
            |   /* goes to "nothing", i.e. empty string */ 
    ;

E:  E BOP BitTerm
    |   BitTerm
    ;

BitTerm:    BitTerm ShiftOp ShiftTerm
            |   ShiftTerm
    ;

ShiftTerm:  ShiftTerm AddOp Term
            |   Term
    ;

Term:   Term MulOp Factor
        |   Factor
    ;

Factor: Factor EXP UOperand
        |   UOperand
    ;

UOperand:   UOp Primary
            |   Primary
    ;

Primary:    ID
            |   name '(' ExprList ')'   
            |   '(' E ')'
            |   floatLiteral		/* any floating point number, d.ff* */
            |   intLiteral		/* could be any integer number */
            |   stringLiteral	/* any quoted string, like "ET phone home" */
    ;

ID: name
    |   name '[' ExprList ']' 
    ;

RelOp:  gt
        |   ge
        |   le
        |   lt
        |   eq
        |   neq
    ;

BOP:    &
        |   '|'
        |   '^'
    ;

ShiftOp:    "<<"
            |   ">>"
    ;

MulOp:  '*'
        |   '/'
        |   '%'
    ;

AddOp:  '+'
        |   '-'
    ;

UOP:    '-'
        |   "++"
        |   "--"
        |   '&'
        |   '~'
    ;
%%
