%start statement_list

%%
statement_list  :   statement_list statement
                |   statement
                ;

statement   :   ID '=' INTLITERAL ';' //basic var assignment
        {
            //$$ = $1->s;//get name of ID
            //generate_copy($1, $3);
            printf("[Parser]:Simple assignment\n");
        }
        |   ID '=' expression ';'
        {
            //$$ = $1->s;//change to our record
            //generate_exp($1, $3);
            printf("[Parser]:Experssion\n");
        }
        |   BEG ';'
        {
            printf("[Parser]:Found 'begin' token\n");
        }
        |   END ';'
        {
            printf("[Parser]:Found 'end' token'\n");
        }
    ;

expression : expression add_op INTLITERAL 
        {
            //printf("\n[Parser]:We're adding a constant, %d\n\n",$3); 
            //const_value += $3;
            printf("[Parser]:Addition/subtraction\n");
        }
       | ID
        { 
            printf("[Parser]:We've seen an ID starting an expression\n"); 
            //const_value = 0;
            //$$ = start_expression_string($1);
        }
   ;

term    :   term mul_op factor
        {
            printf("[Parser]:Multiplication/division\n");
        }
        | factor
        {
            printf("[Parser]:Single factor\n");
        }
    ;

factor  :   factor EXPONENT atom
        {
            printf("[Parser]:Exponentiation\n");
        }
    ;

atom    :   ID
        {
            printf("[Parser]:ID is...\n");
        }
        |   INTLITERAL
        {
            printf("[Parser]:INTLITERAL is...\n");
        }
        |   '(' expression ')'
        {
            printf("[Parser]:Expression\n");
        }
    ;

add_op  :   '+'
        |   '-'
        ;

mul_op :   '*'
        |   '/'
        ;
%%

/* For basic assignment. 
 * Should produce something like:
 *      '%s = %d\n'
 */
void generate_copy(Stack *symbolTableStack, int value)
{
    /*  write a statment of the form 
        
        x = 17;   
    
        where x is 
    */

    //printf("oril %d,r0,r%d\n",value,symbol->offset);
    //printf("%s = %d;\n", symbol->s, value);//what it should look like. sub our vars in.
}

void yyerror(const char *s)
{
        fflush(stdout);
        printf("Syntax Error %s\n",s);
}